/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.vn.movieviewer.view.dialog;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import org.vn.movieviewer.dto.SentenceDto;
import org.apache.log4j.Logger;
import org.vn.movieviewer.config.Utils;
import org.vn.movieviewer.controller.SmartLearningController;
import org.vn.movieviewer.dto.EditorSentenceDto;
import org.vn.movieviewer.renderer.PagingTable;
import org.vn.movieviewer.renderer.SelectAllHeader;
import org.vn.movieviewer.renderer.TableModelGeneral;
import org.vn.movieviewer.view.main.SubtitleCompaireFrm;

/**
 *
 * @author danglph
 */
public class SmartFilter extends javax.swing.JDialog {

    private static Logger logger = Logger.getLogger(SmartFilter.class);
    private PagingTable pagingTable;
    private TableModelGeneral tableModelEditor;
    private Map<Integer, EditorSentenceDto> mapEditorSentenceDto = null;

    /**
     * Creates new form SmartFilter
     */
    public SmartFilter(java.awt.Frame parent, boolean modal, Map<Integer, SentenceDto> mapSentenceDto) {

        super(parent, modal);
        initComponents();

        this.setTitle("Biên tập phụ đề");
        String[] columnNames = {
            "Chọn", "Dòng", "Nội dung", "Nội dung bị phát hiện", "Hành động", "Thao tác"
        };
//        this.mapSentenceDto = mapSentenceDto;

        initTableListenner(columnNames);
        jTFCurrentPage.setInputVerifier(new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                JTextField temp = (JTextField) input;
                try {
                    int number = Integer.parseInt(temp.getText());
                    if (number < PagingTable.FIRST_PAGE) {
                        JOptionPane.showMessageDialog(null, "Trang phải lớn hơn hoặc bằng " + PagingTable.FIRST_PAGE);
                        return false;
                    } else if (number > pagingTable.getTotalPage()) {
                        JOptionPane.showMessageDialog(null, "Trang phải nhỏ hơn hoặc bằng " + pagingTable.getTotalPage());
                        return false;
                    }
                    return true;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Chỉ được nhập số!");
                }
                return false;
            }
        });
        loadInitDataTable(mapSentenceDto);
    }

    public SmartFilter(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jTFCurrentPage = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLTotalPages = new javax.swing.JLabel();
        jLDataFrom = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTFCurrentPage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCurrentPage.setText("2");
        jTFCurrentPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCurrentPageActionPerformed(evt);
            }
        });

        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("|<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(">");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(">>|");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLTotalPages.setText("/10");
        jLTotalPages.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLDataFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLDataFrom.setText("Dữ liệu từ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFCurrentPage, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(128, 128, 128)
                .addComponent(jLDataFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCurrentPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLDataFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButton8.setText("Apply Selected");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Apply page");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Ignore Selected");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Ignore page");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Reverse Selection");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/active.png"))); // NOI18N
        jButton14.setText("Apply");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton14)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jButton14)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 424, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(74, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFCurrentPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCurrentPageActionPerformed
        // TODO add your handling code here:
        try {
            this.pagingTable.setCurentPage(Integer.parseInt(jTFCurrentPage.getText()));
            initTableDataType(this.pagingTable.getRowCache());
            Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }//GEN-LAST:event_jTFCurrentPageActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.prevPage();
        initTableDataType(this.pagingTable.getRowCache());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (this.pagingTable.getCurentPage() != PagingTable.FIRST_PAGE) {
            this.pagingTable.setCurentPage(PagingTable.FIRST_PAGE);
            initTableDataType(this.pagingTable.getRowCache());
            Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.nextPage();
        initTableDataType(this.pagingTable.getRowCache());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (this.pagingTable.getCurentPage() != this.pagingTable.getTotalPage()) {
            this.pagingTable.setCurentPage(this.pagingTable.getTotalPage());
            initTableDataType(this.pagingTable.getRowCache());
            Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //1. Lưu lại tất cả những dòng của trang vào mapDeleteEditorSentenceDto
        //2. remove tất cả những dòng của trang ra khỏi mapEditorSentenceDto
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        //1. Lưu lại những dòng đã chọn vào mapDeleteEditorSentenceDto
        //2. remove những dòng đã chọn ra khỏi mapEditorSentenceDto
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < this.tableModelEditor.getRowCount(); i++) {
            this.tableModelEditor.setValueAt(!(Boolean) this.tableModelEditor.getValueAt(i, 0), i, 0);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:                                 
        //1. remove những dòng đã chọn của trang ra khỏi mapEditorSentenceDto
        int start = (this.pagingTable.getCurentPage() - 1) * this.pagingTable.getPageOffset();
        for (int i = 0; i < this.tableModelEditor.getRowCount(); i++) {
            EditorSentenceDto dto = this.mapEditorSentenceDto.get(start + i);
            if ((Boolean) this.tableModelEditor.getValueAt(i, 0)) {
                this.tableModelEditor.setValueAt(EditorSentenceDto.DENY, i, 5);
                dto.setProccess(EditorSentenceDto.DENY);
            } else {
                this.tableModelEditor.setValueAt(EditorSentenceDto.APPLY, i, 5);
                dto.setProccess(EditorSentenceDto.APPLY);
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        //1. remove tất cả những dòng của trang ra khỏi mapEditorSentenceDto
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        List<Integer> lstDeleteRowIndex = new ArrayList<>();
        SubtitleCompaireFrm parent = (SubtitleCompaireFrm) this.getParent();

        for (Map.Entry<Integer, EditorSentenceDto> entry : mapEditorSentenceDto.entrySet()) {
            Integer key = entry.getKey();
            EditorSentenceDto value = entry.getValue();
            if (!value.getProccess().equals(EditorSentenceDto.DENY)) {
                lstDeleteRowIndex.add(value.getRowNumber());
            } else {
                SmartLearningController.learn(SmartLearningController.IGNORE, value.getContent().toString());
            }
        }

        if (parent != null && lstDeleteRowIndex.size() > 0) {
            parent.UpdateSub(lstDeleteRowIndex);
        }

        //close dialog
        this.dispose();
    }//GEN-LAST:event_jButton14ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartFilter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SmartFilter dialog = new SmartFilter(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLDataFrom;
    private javax.swing.JLabel jLTotalPages;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCurrentPage;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void initTableListenner(String[] columnNames) {
        //init tableview

        this.tableModelEditor = new TableModelGeneral(columnNames) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
//           "Chọn", "Dòng", "Nội dung", "Nội dung bị phát hiện", "Hành động"
                Class clazz = Object.class;
                switch (columnIndex) {
                    case 0:
                        clazz = Boolean.class;
                        break;
                }
                return clazz;
            }
        };
        this.jTable1.setModel(tableModelEditor);
        this.jTable1.setRowHeight(30);

        TableColumn column1 = this.jTable1.getColumnModel().getColumn(0);
        column1.setHeaderRenderer(new SelectAllHeader(this.jTable1, 0));
        TableColumn column2 = this.jTable1.getColumnModel().getColumn(2);
        TableColumn column3 = this.jTable1.getColumnModel().getColumn(3);
        TableColumn column4 = this.jTable1.getColumnModel().getColumn(4);
        column2.setPreferredWidth(600);
        column3.setPreferredWidth(300);
        column4.setPreferredWidth(200);
        TableColumn column5 = this.jTable1.getColumnModel().getColumn(5);
        column5.setPreferredWidth(100);
        column5.setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                String s = table.getModel().getValueAt(row, col).toString();

                if (s.equalsIgnoreCase(EditorSentenceDto.APPLY)) {
                    setBackground(Color.RED);
                } else if (s.equalsIgnoreCase(EditorSentenceDto.DENY)) {
                    setBackground(Color.GREEN);
                } else {
                    setBackground(Color.darkGray);
                }

                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                        row, col);

            }
        });

        this.jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
    }

    private void initTableDataType(List<Object> lstObject) {

        this.tableModelEditor.getDataVector().removeAllElements();
        if (lstObject != null && !lstObject.isEmpty()) {
            Object[] moviesData = null;

            for (int i = 0; i < lstObject.size(); i++) {
                moviesData = new Object[this.tableModelEditor.getColumnCount()];
                EditorSentenceDto editorsentenceDto = (EditorSentenceDto) lstObject.get(i);
                moviesData[0] = Boolean.FALSE;
                moviesData[1] = editorsentenceDto.getRowNumber();
                moviesData[2] = editorsentenceDto.getContent();
                moviesData[3] = editorsentenceDto.getMatchContent();
                moviesData[4] = editorsentenceDto.getAction();
                moviesData[5] = editorsentenceDto.getProccess();
                tableModelEditor.addRow(moviesData);
            }
        }
        this.jTable1.updateUI();
    }

    private void loadInitDataTable(Map<Integer, SentenceDto> mapSentenceDto) {
        //load data
        convertToEditorSentenceDtoAndParse(mapSentenceDto);

        this.pagingTable = null;
        this.pagingTable = new PagingTable(getIDList(mapEditorSentenceDto)) {
//        this.pagingTable = new PagingTable(null) {//new ArrayList<Integer>()

            @Override
            public boolean AddPageToRowCache() {
                List<EditorSentenceDto> lstSequenceInPage = editorSentenceGet(this.getStart(), this.getPageOffset(), mapEditorSentenceDto);
                if (this.rowCache != null) {
                    this.rowCache.clear();
                } else {
                    this.rowCache = new ArrayList<>();
                }
                for (Iterator<EditorSentenceDto> iterator = lstSequenceInPage.iterator(); iterator.hasNext();) {
                    EditorSentenceDto next = iterator.next();
                    this.rowCache.add(next);
                }
                return true;
            }
        };
//        lstImportMovies = (List<MainMovie>)this.pagingTable.getRowCache();
        initTableDataType(this.pagingTable.getRowCache());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
    }

    private void convertToEditorSentenceDtoAndParse(Map<Integer, SentenceDto> mapSentenceDto) {
        //1. Chuyển sang đối tượng EditorSentenceDto
        //2. Lọc ra từ action DELETE
        if (this.mapEditorSentenceDto == null) {
            this.mapEditorSentenceDto = new HashMap<>();
        } else {
            this.mapEditorSentenceDto.clear();
        }

        int i = 0;
        StringBuffer matchContent = null;
        for (Map.Entry<Integer, SentenceDto> entry : mapSentenceDto.entrySet()) {
            Integer key = entry.getKey();
            SentenceDto value = entry.getValue();
            matchContent = new StringBuffer();
            matchContent.append(SmartLearningController.isMatchAction(SmartLearningController.IGNORE, value.getContent().toString()));
            if (matchContent.toString().equals("")) {
                matchContent = new StringBuffer();
                matchContent.append(SmartLearningController.isMatchAction(SmartLearningController.DELETE_PATTERN, value.getContent().toString()));
                if (!matchContent.toString().equals("")) {
                    EditorSentenceDto matchItem = new EditorSentenceDto(key);
                    matchItem.setRowNumber(key);
                    matchItem.setAction(SmartLearningController.DELETE_PATTERN);
                    matchItem.initContent(value.getContent().toString());
                    matchItem.initContentTranslate(value.getContentTranslate().toString());
                    matchItem.initMatchContent(matchContent.toString());

                    this.mapEditorSentenceDto.put(i++, matchItem);
                }
            }
        }
    }

    private List<Integer> getIDList(Map<Integer, EditorSentenceDto> mapEditorSentenceDto) {
        List<Integer> lstId = new ArrayList<>();
        for (Map.Entry<Integer, EditorSentenceDto> entry : mapEditorSentenceDto.entrySet()) {
            Integer key = entry.getKey();
            lstId.add(key);
        }
        return lstId;
    }

    private List<EditorSentenceDto> editorSentenceGet(int start, int pageOffset, Map<Integer, EditorSentenceDto> mapEditorSentenceDto) {
        List<EditorSentenceDto> lstSequenceInPage = new ArrayList<>();
        int startRow = start;
        int endRow = Integer.min(mapEditorSentenceDto.size(), startRow + pageOffset);
        for (int i = startRow; i < endRow; i++) {
            if (!mapEditorSentenceDto.containsKey(i)) {
                logger.debug("Stop, map size = " + mapEditorSentenceDto.size() + "~" + i);
                break;
            }
            lstSequenceInPage.add(mapEditorSentenceDto.get(i));
        }
        return lstSequenceInPage;
    }

    /**
     * @return the mapEditorSentenceDto
     */
    public boolean existData() {
        return (this.mapEditorSentenceDto != null && this.mapEditorSentenceDto.size() > 0);
    }
}
