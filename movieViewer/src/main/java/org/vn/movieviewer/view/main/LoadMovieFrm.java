/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.vn.movieviewer.view.main;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.activation.MimetypesFileTypeMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;
import org.vn.movieviewer.config.GlobalVariables;
import org.vn.movieviewer.config.Utils;
import org.vn.movieviewer.renderer.TableModelGeneral;
import org.vn.movieviewer.dao.daoMainMovie;
import org.vn.movieviewer.dto.MainMovie;
import org.vn.movieviewer.dto.MovieImportDto;

/**
 *
 * @author danglph
 */
public class LoadMovieFrm extends javax.swing.JDialog {

    private static Logger logger = Logger.getLogger(LoadMovieFrm.class);
    private TableModelGeneral tableModelMovies;
    private Map<String, MovieImportDto> lstImportMovie;
    private TableRowSorter sorterDevice;

    /**
     * Creates new form NewJDialog
     */
    public LoadMovieFrm(java.awt.Frame parent, boolean modal, File[] listOfFiles) {
        super(parent, modal);
        initComponents();
        this.setTitle("Danh sách phim mới");
        lstImportMovie = importFiles(listOfFiles);
        String[] columnNames = {
            "STT", "Tên phim", "Poster", "Đường dẫn", "Thông tin", "Xóa"
        };
        //init tableview
        initTableListenner(columnNames);
        initTableData(lstImportMovie);
        jTFMovieFolderPath.setText(GlobalVariables.folderReloadPath);
//        loadNewMovieFromFolder();
    }

    public LoadMovieFrm() {
        initComponents();
//        initView();
        this.setTitle("Danh sách phim mới");
//        initData();
//        loadNewMovieFromFolder();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMovies = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTFMovieFolderPath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jTableMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableMovies);

        jLabel1.setText("Thư mục phim");

        jButton2.setText("Mở thư mục");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Tải lại");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFMovieFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFMovieFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Tổng:");

        jButton1.setText("Lưu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(448, 448, 448)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(this, "Bạn muốn thêm các phim này", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            List<MainMovie> lstMainMovie = getMainMovie(lstImportMovie);

            int numbSuccess = daoMainMovie.insert(lstMainMovie);
            if (numbSuccess == lstMainMovie.size()) {
                JOptionPane.showMessageDialog(this, "Thêm thành công.");
            } else if (numbSuccess < lstMainMovie.size()) {
                JOptionPane.showMessageDialog(this, "Thêm thành công (" + numbSuccess + ") phim");
            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fc = new JFileChooser(jTFMovieFolderPath.getText().equals("") ? "" : jTFMovieFolderPath.getText());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            jTFMovieFolderPath.setText(file.getPath());
            //This is where a real application would open the file.
//                log.append("Opening: " + file.getName() + "." + newline);
        } else {
//                log.append("Open command cancelled by user." + newline);
        }
//        try {
//        } catch (IOException ex) {
//            java.util.logging.Logger.getLogger(LoadMovieFrm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        File folder = new File(jTFMovieFolderPath.getText());
        File[] listOfFiles = folder.listFiles();
        lstImportMovie = importFiles(listOfFiles);
        initTableData(lstImportMovie);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadMovieFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadMovieFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadMovieFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadMovieFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadMovieFrm().setVisible(true);
            }
        });
    }

    private void initTableData(Map<String, MovieImportDto> moviesList) {
        this.tableModelMovies.getDataVector().removeAllElements();
//            "Chọn", "Tên phim", "Poster", "Đường dẫn", "Thông tin", "Xóa"
        if (moviesList != null && moviesList.size() > 0) {
            Object[] moviesData = null;
            for (Map.Entry<String, MovieImportDto> entry : moviesList.entrySet()) {
                String key = entry.getKey();
                MovieImportDto value = entry.getValue();
                moviesData = new Object[this.tableModelMovies.getColumnCount()];
                moviesData[0] = tableModelMovies.getRowCount() + 1;
                moviesData[1] = value.getName();
                moviesData[2] = Utils.getImagePosterLocal(value.getPath());
                moviesData[3] = value.getPath();
                moviesData[4] = GlobalVariables.imgViewDetail;
                moviesData[5] = GlobalVariables.imgDelete;
//                if (moviesData[2] != null) {
//                    int height = ((ImageIcon) moviesData[2]).getIconHeight();
//                    if (height > 0) {
//                        jTableMovies.setRowHeight(tableModelMovies.getRowCount(), height);
//                    }
//                }
                tableModelMovies.addRow(moviesData);
            }
        }
        updateTotalMovies();
        jTableMovies.setRowHeight(140);
        jTableMovies.updateUI();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFMovieFolderPath;
    private javax.swing.JTable jTableMovies;
    // End of variables declaration//GEN-END:variables

    private String ExtractMoviesName(String filePath) {
        String name;
        name = filePath.substring(filePath.lastIndexOf("\\") + 1);
        name = name.replace(".", " ");
        return name;
    }

    private Map<String, MovieImportDto> importFiles(File[] listOfFiles) {
        if (listOfFiles != null && listOfFiles.length > 0) {
            Map<String, MovieImportDto> lstImportMovies = new HashMap<String, MovieImportDto>();
            for (File file : listOfFiles) {
                if (file.isDirectory()) {
//                System.out.println(file.getName());
                    MovieImportDto dto = new MovieImportDto();
                    dto.setName(ExtractMoviesName(file.getName()));
                    dto.setPath(file.getPath());
                    lstImportMovies.put(dto.getName(), dto);
                }
            }
            return lstImportMovies;
        }
        return null;
    }

    private void initTableListenner(String[] columnNames) {
        this.tableModelMovies = new TableModelGeneral(columnNames) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
//            "STT", "Tên phim", "Đường dẫn", "Thông tin", "Xóa"
                Class clazz = Object.class;
                switch (columnIndex) {
//                    case 0:
//                        clazz = Boolean.class;
//                        break;
                    case 2:
                    case 4:
                    case 5:
                        clazz = ImageIcon.class;
                        break;

                }
                return clazz;
            }
            
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == -1;
            }
            
        };
        this.jTableMovies.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        this.jTableMovies.setModel(tableModelMovies);

//        TableColumn column0 = this.jTableMovies.getColumnModel().getColumn(0);
//        column0.setHeaderRenderer(new SelectAllHeader(this.jTableMovies, 0));
        TableColumn column1 = this.jTableMovies.getColumnModel().getColumn(1);
        TableColumn column3 = this.jTableMovies.getColumnModel().getColumn(3);
        column1.setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value,
                    boolean isSelected, boolean hasFocus,
                    int row, int column) {
                JLabel c = (JLabel) super.getTableCellRendererComponent(table, value,
                        isSelected, hasFocus,
                        row, column);/// params from above 
                c.setToolTipText(c.getText());
                return c;
            }
        });
        column3.setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value,
                    boolean isSelected, boolean hasFocus,
                    int row, int column) {
                JLabel c = (JLabel) super.getTableCellRendererComponent(table, value,
                        isSelected, hasFocus,
                        row, column);/// params from above 
                c.setToolTipText(c.getText());
                return c;
            }
        });

        sorterDevice = new TableRowSorter(tableModelMovies) {
            @Override
            public boolean isSortable(int column) {
                return false;
            }
        ;
        };
        this.jTableMovies.addMouseListener(new MouseAdapter() {

//            @Override
//            public void mouseEntered(MouseEvent me) {
//                JTable table = (JTable) me.getSource();
//                if (table != null) {
//                    Point p = me.getPoint();
//                    int row = table.rowAtPoint(p);
//                    int rowAfterSorted = table.convertRowIndexToModel(row);
//                    int col = table.columnAtPoint(p);
//                    if (col == 1) {
//                        String movieName = tableModelMovies.getValueAt(rowAfterSorted, 1).toString();
//                        String html = movieName;
//                        table.setToolTipText(html);
//                    }
//                }
//            }
            @Override
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                int rowAfterSorted = table.convertRowIndexToModel(row);
                int col = table.columnAtPoint(p);

                switch (col) {
//                    case 0:
//                        table.getModel().setValueAt(!(boolean) table.getModel().getValueAt(rowAfterSorted, 0), rowAfterSorted, 0);
////                } else if (col == 1) {
////                    String movieName = tableModelMovies.getValueAt(rowAfterSorted, 1).toString();
////                    String html = movieName;
////                    table.setToolTipText(html);
//                        break;
                    case 4: {
                        String movieName = tableModelMovies.getValueAt(rowAfterSorted, 1).toString();
                        logger.trace("View detail selected movie:[" + movieName + "]");
                        if (movieName != null && !movieName.isEmpty()) {

                            MovieImportDto obj = lstImportMovie.get(movieName);
                            if (obj != null) {
//                            List<Lamp> lstLamp = lstDataSimulators.get(nLampd).getLstLamp();
//                            if (lstLamp == null) {
//                                lstLamp = daoLamp.getLampsByLampDScode(nLampd);
//                                lstDataSimulators.get(nLampd).setLstLamp(lstLamp);
//                            }
//                            LampManage frm = new LampManage(mainApp, true, obj, lstLamp);
//                            frm.setLocationRelativeTo(null);
//                            frm.setVisible(true);
                            }
                        }
                        break;
                    }
                    case 5: {
                        String movieName = tableModelMovies.getValueAt(rowAfterSorted, 1).toString();
                        logger.trace("Delete selected movie:[" + movieName + "]");
                        if (movieName != null && !movieName.isEmpty()) {

                            MovieImportDto obj = lstImportMovie.get(movieName);
                            if (obj != null) {
                                lstImportMovie.remove(movieName);
                                initTableData(lstImportMovie);
                            }
                        }
                        break;
                    }
                    default:
                        break;
                }
            }
        }
        );
        this.jTableMovies.setRowSorter(sorterDevice);
    }

    private List<MainMovie> getMainMovie(Map<String, MovieImportDto> lstImportMovie) {
        if (lstImportMovie != null) {
            List<MainMovie> result = new ArrayList<>();
            for (Map.Entry<String, MovieImportDto> entry : lstImportMovie.entrySet()) {
                String key = entry.getKey();
                MovieImportDto value = entry.getValue();
                MainMovie mainMovie = new MainMovie();
                mainMovie.setName(key);
                mainMovie.setCreateDate(new Date());
                result.add(mainMovie);
            }
            return result;
        } else {
            return null;
        }
    }

    private void updateTotalMovies() {
        jLabel2.setText(lstImportMovie != null ? lstImportMovie.size() + "" : "0");
    }
}
