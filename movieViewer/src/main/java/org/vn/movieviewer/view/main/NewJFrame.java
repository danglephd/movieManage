/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.vn.movieviewer.view.main;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import org.apache.log4j.Logger;
import org.vn.movieviewer.config.GlobalVariables;
import org.vn.movieviewer.config.PagingTable;
import org.vn.movieviewer.config.StarRater;
import org.vn.movieviewer.config.TableModelGeneral;
import org.vn.movieviewer.config.Untils;
import org.vn.movieviewer.dao.daoMainGenre;
import org.vn.movieviewer.dao.daoMainMovie;
import org.vn.movieviewer.dto.MainGenre;
import org.vn.movieviewer.dto.MainMovie;
import org.vn.movieviewer.view.dialog.AddGenreDialog;
import org.vn.movieviewer.view.dialog.VoteDialog;

/**
 *
 * @author danglph
 */
public class NewJFrame extends javax.swing.JFrame {

    private static Logger logger = Logger.getLogger(NewJFrame.class);
    private TableModelGeneral tableModelMovies;
//    private List<MainMovie> lstImportMovies = null;
    private File[] listOfFiles = null;
    private Map<Integer, MainGenre> mapGenre = null;
    private PagingTable pagingTable;
    private String[] genreArray = null;
    private int selectedRow = -1;
    private int[] selectedRows = null;
    boolean isUpdateGenres = false;
//    private StarRater starRater = new StarRater(10);

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        this.setTitle("Quản lý phim ảnh");
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        exampleStar();
        createConfigData();
        String[] columnNames = {
            "STT", "Tên phim", "Đánh giá", "Thể loại", "Ngày tạo", "Phụ đề", "Đã xem"
        };
        initTableListenner(columnNames);
        loadConfigInfo();
        loadGenreInfo();
        loadMoviesFromDatabase("");
        loadNewMovieFromFolder(GlobalVariables.folderReloadPath);
        initFormView();
        setPanelEnabled(jPanel1, false);
        setPanelEnabled(jPanel3, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMovies = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTFMovieName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTFMovieName2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jTFYear = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jBtVote = new javax.swing.JButton();
        starRater1 = new org.vn.movieviewer.config.StarRater();
        jLRating = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTFImgUrl = new javax.swing.JTextField();
        jBtUpdate = new javax.swing.JButton();
        jBtAddGenre = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTPGenres = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jCBSubtitle = new javax.swing.JCheckBox();
        jCBWatched = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTPGenres1 = new javax.swing.JTextPane();
        jBtAddGenre1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTPGenres2 = new javax.swing.JTextPane();
        jBtAddGenre2 = new javax.swing.JButton();
        jBtUpdate1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTFCurrentPage = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLTotalPages = new javax.swing.JLabel();
        jLDataFrom = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jCBGenre = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jTFMovieNameSearch = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMIExit = new javax.swing.JMenuItem();
        jMINewMovies = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jTableMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableMovies);

        jPanel1.setEnabled(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 578));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Thông tin");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Tên phim");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Thể loại");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Nước sán xuất");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Đạo diễn");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Diễn viên");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Nội dung");

        jScrollPane2.setViewportView(jTextPane1);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Năm phát hành");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Điểm số");

        jBtVote.setText("Đánh giá");
        jBtVote.setEnabled(false);
        jBtVote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtVoteActionPerformed(evt);
            }
        });

        starRater1.setEnabled(false);

        jLRating.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(starRater1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jLRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtVote))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtVote)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(starRater1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Image URL");

        jBtUpdate.setText("Cập nhật");
        jBtUpdate.setEnabled(false);
        jBtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtUpdateActionPerformed(evt);
            }
        });

        jBtAddGenre.setText("Cập nhật thể loại");
        jBtAddGenre.setEnabled(false);
        jBtAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAddGenreActionPerformed(evt);
            }
        });

        jTPGenres.setEditable(false);
        jScrollPane4.setViewportView(jTPGenres);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Phụ đề");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Đã xem");

        jCBSubtitle.setText("Tiếng Việt");
        jCBSubtitle.setEnabled(false);
        jCBSubtitle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCBSubtitleMouseClicked(evt);
            }
        });

        jCBWatched.setEnabled(false);
        jCBWatched.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCBWatchedMouseClicked(evt);
            }
        });

        jTPGenres1.setEditable(false);
        jScrollPane5.setViewportView(jTPGenres1);

        jBtAddGenre1.setText("Cập nhật đạo diễn");
        jBtAddGenre1.setEnabled(false);
        jBtAddGenre1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAddGenre1ActionPerformed(evt);
            }
        });

        jTPGenres2.setEditable(false);
        jScrollPane6.setViewportView(jTPGenres2);

        jBtAddGenre2.setText("Cập nhật diễn viên");
        jBtAddGenre2.setEnabled(false);
        jBtAddGenre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAddGenre2ActionPerformed(evt);
            }
        });

        jBtUpdate1.setText("Bỏ qua");
        jBtUpdate1.setEnabled(false);
        jBtUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtUpdate1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFMovieName)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jTFMovieName2)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTFYear)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBSubtitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                    .addComponent(jCBWatched, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtAddGenre, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBtAddGenre1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBtAddGenre2, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTFImgUrl)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtUpdate1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtUpdate)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtAddGenre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFMovieName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtAddGenre1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtAddGenre2)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBSubtitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBWatched))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFImgUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtUpdate)
                    .addComponent(jBtUpdate1)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTFCurrentPage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCurrentPage.setText("2");

        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("|<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(">");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(">>|");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/refresh-icon.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLTotalPages.setText("/10");
        jLTotalPages.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLDataFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLDataFrom.setText("Dữ liệu từ");

        jButton6.setText("Cập nhật");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFCurrentPage, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLDataFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCurrentPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jLTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLDataFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)))
        );

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Thể loại");

        jCBGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton7.setText("Tìm");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Tên phim");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCBGenre, 0, 155, Short.MAX_VALUE)
                    .addComponent(jTFMovieNameSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jCBGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFMovieNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu1MenuSelected(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMIExit.setText("Thoát");
        jMIExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMIExit);

        jMINewMovies.setText("Phim mới");
        jMINewMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMINewMoviesActionPerformed(evt);
            }
        });
        jMenu1.add(jMINewMovies);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu3.setText("jMenu3");
        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIExitActionPerformed
        // TODO add your handling code here:                                     
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jMIExitActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
        loadNewMovieFromFolder(GlobalVariables.folderReloadPath);
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu1MenuSelected
        // TODO add your handling code here:
        logger.debug(">");
    }//GEN-LAST:event_jMenu1MenuSelected

    private void jMINewMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMINewMoviesActionPerformed
        // TODO add your handling code here:
        LoadMovieFrm frm = new LoadMovieFrm(this, true, listOfFiles);
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);

        loadMoviesFromDatabase("");
    }//GEN-LAST:event_jMINewMoviesActionPerformed

    private void jBtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtUpdateActionPerformed
        // TODO add your handling code here:    
        if (selectedRows == null) {
            MainMovie movieSelected = (MainMovie) pagingTable.getByRow(selectedRow);
            movieSelected.setName(jTFMovieName.getText());
            if (mapGenre != null && mapGenre.size() > 0) {
                String selectedIdGenresByStr = jTPGenres.getText();
//                String[] selectedGenres = jTPGenres.getText().equals("") ? null : jTPGenres.getText().split(GlobalVariables.separatorComa);
//                if (selectedGenres != null) {
//
//                    for (int i = 0; i < selectedGenres.length; i++) {
//                        String nameGenre = selectedGenres[i];
//                        MainGenre mainGenre = daoMainGenre.getByName(nameGenre);
//                        selectedIdGenresByStr += mainGenre.getIdmainGenre() + GlobalVariables.separatorComa;
//                    }
//                }

                movieSelected.setGenres(selectedIdGenresByStr);
            }
            movieSelected.setSubtitle(jCBSubtitle.isSelected());
            if (!jTFYear.getText().equals("")) {
                movieSelected.setReleaseYear(Integer.parseInt(jTFYear.getText()));
            }
            movieSelected.setIsWatched(jCBWatched.isSelected());
//        movieSelected.setIvote();//Rate(Float.parseFloat(starRater1.getSelection() + ""));
            movieSelected.setPosterUrl(jTFImgUrl.getText());
            daoMainMovie.update(movieSelected);
        } else {
            //Update multi rows
            List<MainMovie> selectedMovies = new ArrayList<>();
            for (int i = 0; i < selectedRows.length; i++) {
                int t = selectedRows[i];
                selectedMovies.add((MainMovie)this.pagingTable.getByRow(t));
            }
            String conditions = "";
            Map<String, Object> params = new HashMap<String, Object>();
            
            if(jCBSubtitle.isEnabled()){
                conditions = putConditions(conditions, " subtitle = :subtitle ");
                params.put("subtitle", jCBSubtitle.isSelected());
            }
            
            if(jCBWatched.isEnabled()){
                conditions = putConditions(conditions, " isWatched = :isWatched ");
                params.put("isWatched", jCBWatched.isSelected());
            }
            
            if(isUpdateGenres){
                conditions = putConditions(conditions, " genres = :genres ");
                params.put("genres", jTPGenres.getText());
            }
            
            daoMainMovie.update(selectedMovies, conditions, params);
        }
        pagingTable.AddPageToRowCache();
        initTableDataType(pagingTable.getRowCache(), pagingTable.getStart());
        setPanelEnabled(jPanel1, false);
        setPanelEnabled(jPanel3, true);
    }//GEN-LAST:event_jBtUpdateActionPerformed

    private String putConditions(String condition, String strToPut){
        if(!condition.equals("")){
            condition += " , " + strToPut;
        }else{
            condition += strToPut;
        }
        return condition;
    }
    
    private void jBtAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAddGenreActionPerformed
        // TODO add your handling code here:
//        MainMovie movieSelected = lstImportMovies.get(selectedRow);
        AddGenreDialog frm = new AddGenreDialog(this, true, mapGenre, jTPGenres.getText());
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);
        loadGenreInfo();
    }//GEN-LAST:event_jBtAddGenreActionPerformed

    private void jBtAddGenre1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAddGenre1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtAddGenre1ActionPerformed

    private void jBtAddGenre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAddGenre2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtAddGenre2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.prevPage();
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        updatePagingView();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.nextPage();
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        updatePagingView();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (this.pagingTable.getCurentPage() != PagingTable.FIRST_PAGE) {
            this.pagingTable.setCurentPage(PagingTable.FIRST_PAGE);
            initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
            updatePagingView();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (this.pagingTable.getCurentPage() != this.pagingTable.getTotalPage()) {
            this.pagingTable.setCurentPage(this.pagingTable.getTotalPage());
            initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
            updatePagingView();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.setCurentPage(Integer.parseInt(jTFCurrentPage.getText()));
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        updatePagingView();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jBtUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtUpdate1ActionPerformed
        // TODO add your handling code here:
        setPanelEnabled(jPanel1, false);
        setPanelEnabled(jPanel3, true);
    }//GEN-LAST:event_jBtUpdate1ActionPerformed

    private void jBtVoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtVoteActionPerformed
        // TODO add your handling code here:
        VoteDialog frm = new VoteDialog(this, true);
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);
    }//GEN-LAST:event_jBtVoteActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        selectedRows = jTableMovies.getSelectedRows();
        if (selectedRows.length > 0) {
//            for (int i = 0; i < selectedRows.length; i++) {
//                int t = selectedRows[i];
//                System.out.println(">>" + t);
//            }
//            MainMovie movieSelected = (MainMovie) pagingTable.getByRow(selectedRow);
            viewMoviesInfo();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        String selectedGenre = (String)jCBGenre.getSelectedItem();
        String movieNameSearch = jTFMovieNameSearch.getText();
        String conditions = "";
        
        if(!selectedGenre.equals("Tất cả")){
            conditions = " where genres like '%" + selectedGenre + "%'";
        }
        
        if(!movieNameSearch.equals("")){
            if(conditions.equals("")){
                conditions += " where name like '%" + movieNameSearch + "%'";
            }else{
                conditions += " and name like '%" + movieNameSearch + "%'";
            }
        }
        
        loadMoviesFromDatabase(conditions);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jCBSubtitleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCBSubtitleMouseClicked
        // TODO add your handling code here:
        if(!jCBSubtitle.isEnabled() && jPanel1.isEnabled()){
            jCBSubtitle.setEnabled(true);
        }
    }//GEN-LAST:event_jCBSubtitleMouseClicked

    private void jCBWatchedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCBWatchedMouseClicked
        // TODO add your handling code here:
        if(!jCBWatched.isEnabled() && jPanel1.isEnabled()){
            jCBWatched.setEnabled(true);
        }
    }//GEN-LAST:event_jCBWatchedMouseClicked

    private void loadNewMovieFromFolder(String filePath) {
        File folder = new File(filePath);
        listOfFiles = folder.listFiles();
        int numbNewMovies = 0;
        if ((this.pagingTable.getTotalRow() <= 0)
                && (listOfFiles != null && listOfFiles.length > 0)) {
            numbNewMovies = listOfFiles.length;
            jMINewMovies.setText("Phim mới(" + numbNewMovies + ")");
        } else {
            listOfFiles = null;
            jMINewMovies.setText("Phim mới");
        }

//        for (File file : listOfFiles) {
//            if (file.isDirectory()) {
//                System.out.println(file.getName());
//                MainMovie dto = new MainMovie();
//                dto.setName(ExtractMoviesName(file.getName()));
//                lstImportMovies.add(dto);
//            }
//        }
//        
//        ite
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    private void initTableListenner(String[] columnNames) {
        //init tableview

        this.tableModelMovies = new TableModelGeneral(columnNames) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
//            "STT", "Tên phim", "Đánh giá", "Thể loại", "Ngày tạo", "Phụ đề", "Đã xem"
                Class clazz = Object.class;
                switch (columnIndex) {
//                    case 0:
//                        clazz = Boolean.class;
//                        break;
                    case 2:
                        clazz = StarRater.class;
                        break;
                    case 4:
                        clazz = Date.class;
                        break;
//                    case 5:
//                        clazz = ImageIcon.class;
//                        break;

                }
                return clazz;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == -1;
            }

//            @Override
//            public int getRowCount() {
//                return daoMainMovie.getRowCount();
//            }
        };
        this.jTableMovies.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        this.jTableMovies.setModel(tableModelMovies);
        this.jTableMovies.setRowHeight(30);

        TableColumn column4 = this.jTableMovies.getColumnModel().getColumn(4);
        column4.setMinWidth(100);

        TableColumn column1 = this.jTableMovies.getColumnModel().getColumn(1);
        column1.setMinWidth(300);
        column1.setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value,
                    boolean isSelected, boolean hasFocus,
                    int row, int column) {
                JLabel c = (JLabel) super.getTableCellRendererComponent(table, value,
                        isSelected, hasFocus,
                        row, column);/// params from above 
                int rowAfterSorted = table.convertRowIndexToModel(row);
//                Integer idMovie = (Integer)table.getModel().getValueAt(rowAfterSorted, 5);
                MainMovie mainMovie = (MainMovie) pagingTable.getByRow(rowAfterSorted);
                String url = mainMovie.getPosterUrl();
                if (url == null) {
                    url = "";
                }
                String html
                        = "<html><body>"
                        + "<img src='"
                        //                        + "https://images-na.ssl-images-amazon.com/images/M/MV5BMzMxMTFlMDYtNjIyNS00YzQ4LWJlMDAtNGQwY2RlZGJiMmM1XkEyXkFqcGdeQXVyNzEyMTA5MTU@._V1_SY1000_SX700_AL_.jpg"
                        + url
                        + "'  width=240 height=320> ";
                c.setToolTipText(html + "<br/>"
                        + "</body></html>");
                return c;
            }
        });

        this.jTableMovies.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                int rowAfterSorted = table.convertRowIndexToModel(row);
                int col = table.columnAtPoint(p);

                if (me.getClickCount() == 2) {
//                    lstImportMovies.
                    selectedRow = rowAfterSorted;
                    selectedRows = null;
                    MainMovie movieSelected = (MainMovie) pagingTable.getByRow(selectedRow);
                    viewMovieInfo(movieSelected);
                }

//                if (col == 0) {
//                    table.getModel().setValueAt(!(boolean) table.getModel().getValueAt(rowAfterSorted, 0), rowAfterSorted, 0);
//                }
            }
        });
    }

    private void viewMoviesInfo() {
        setPanelEnabled(jPanel1, true);
        setPanelEnabled(jPanel3, false);
        
        jCBSubtitle.setEnabled(false);
        jCBWatched.setEnabled(false);

        jTFMovieName.setText("");
        jTFMovieName.setEnabled(false);
        String selectedIdGenre = "";
        jTPGenres.setText(selectedIdGenre);
//        jBtAddGenre.setEnabled(false);
        jTFImgUrl.setText("");
        jTFImgUrl.setEnabled(false);
        updateRatingLabel(0, 0);
        jBtVote.setEnabled(false);

        isUpdateGenres = false;//để cập nhật Genres
        jCBSubtitle.setSelected(false);
        jCBWatched.setSelected(false);
        jTFYear.setText("");
        jTFYear.setEnabled(false);
    }

    private void viewMovieInfo(MainMovie movieInfo) {
//        StarRater starRater = new StarRater(10);
        jTFMovieName.setText(movieInfo.getName());
        String selectedIdGenre = "";
        if (movieInfo.getGenres() != null && !movieInfo.getGenres().equals("")) {
//            String[] arrayIdGenre = movieInfo.getGenres().split(GlobalVariables.separatorComa);
//            for (int i = 0; i < arrayIdGenre.length; i++) {
//                if (mapGenre.get(Integer.parseInt(arrayIdGenre[i])) != null) {
//                    selectedIdGenre += mapGenre.get(Integer.parseInt(arrayIdGenre[i])).getName() + GlobalVariables.separatorComa;
//                }
//            }
            selectedIdGenre = movieInfo.getGenres();
        }
        jTPGenres.setText(selectedIdGenre);
        jTFImgUrl.setText(movieInfo.getPosterUrl());
        Integer numVote = movieInfo.getIvote() != null ? movieInfo.getIvote() : 0;
        Integer totalScore = movieInfo.getItotalScore() != null ? movieInfo.getItotalScore() : 0;
        updateRatingLabel(numVote, totalScore);

        jCBSubtitle.setSelected(movieInfo.getSubtitle() != null && movieInfo.getSubtitle());
        jCBWatched.setSelected(movieInfo.getIsWatched() != null && movieInfo.getIsWatched());
        jTFYear.setText(movieInfo.getReleaseYear() != null ? movieInfo.getReleaseYear() + "" : "");
        setPanelEnabled(jPanel1, true);
        setPanelEnabled(jPanel3, false);

    }

    private void initTableDataType(List<Object> moviesList, int start) {
        this.tableModelMovies.getDataVector().removeAllElements();
        if (moviesList != null && !moviesList.isEmpty()) {
            Object[] moviesData = null;

//            StarRater starRater = new StarRater(10, 2, 1);
//            starRater.addStarListener(
//                new StarRater.StarListener()   {
//
//                    public void handleSelection(int selection) {
//                        System.out.println(selection);
//                    }
//                });
//                starRater.setBounds(0, 0, 150, 20);
//            String[] arrayIdGenreByStr = null;
            Double rating = 0.0d;

            for (int i = 0; i < moviesList.size(); i++) {
                rating = 0.0d;
                moviesData = new Object[this.tableModelMovies.getColumnCount()];
//                StarRater starRater = new StarRater(10, moviesList.get(i).getStart() != null ? moviesList.get(i).getStart() : 0);
//                starRater.setBounds(0, 0, 180, 20);
                MainMovie mainMovie = (MainMovie) moviesList.get(i);
//                String[] arrayIdGenreById = (mainMovie.getGenres() == null || mainMovie.getGenres().equals("")) ? null : mainMovie.getGenres().split(GlobalVariables.separatorComa);
//                arrayIdGenreByStr = != null && mapGenre != null && mapGenre.containsKey(mainMovie.getIdgenre()) ? mainMovie.getIdgenre() : -1;
                moviesData[0] = i + start + 1;
                moviesData[1] = mainMovie.getName();
                if (mainMovie.getItotalScore() != null && mainMovie.getIvote() != null
                        && mainMovie.getItotalScore() > 0 && mainMovie.getIvote() > 0) {
                    rating = mainMovie.getItotalScore().doubleValue() / mainMovie.getIvote().doubleValue();
                }

                moviesData[2] = GlobalVariables.df.format(rating);
//                if (arrayIdGenreById != null && arrayIdGenreById.length > 0
//                        && mapGenre != null && mapGenre.size() > 0) {
//                    String stringGenres = "";
//                    for (int j = 0; j < arrayIdGenreById.length; j++) {
//                        stringGenres += mapGenre.get(Integer.parseInt(arrayIdGenreById[j])).getName() + GlobalVariables.separatorComa;
//                    }
//                    moviesData[3] = stringGenres;
//                }
                moviesData[3] = mainMovie.getGenres();
                moviesData[4] = mainMovie.getCreateDate() != null ? mainMovie.getCreateDate() : "";
                moviesData[5] = mainMovie.getSubtitle() == null || !mainMovie.getSubtitle() ? "Không có" : "Có";
                moviesData[6] = mainMovie.getIsWatched() == null || !mainMovie.getIsWatched() ? "Chưa xem" : "Đã xem";
                tableModelMovies.addRow(moviesData);
            }
        }
        jTableMovies.updateUI();
    }

    private void createConfigData() {
        try {
            File hibernateCfg = new File(System.getProperty("user.dir") + File.separator + "hibernate.cfg.xml");
            if (!hibernateCfg.exists()) {
                InputStream resource = NewJFrame.class.getClassLoader().getResourceAsStream("ConfigFile/hibernate.cfg.xml");
                if (resource != null) {
                    try (InputStream in = resource;
                            OutputStream writer = new BufferedOutputStream(
                                    new FileOutputStream(hibernateCfg.getAbsolutePath()))) {
                        byte[] buffer = new byte[1024 * 4];
                        int length;
                        while ((length = in.read(buffer)) >= 0) {
                            writer.write(buffer, 0, length);
                        }
                        writer.close();
                        // in.close();
                    } catch (Exception e) {
                        //JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }

            File generalConfig = new File(System.getProperty("user.dir") + File.separator + "GeneralCfg.config");
            if (!generalConfig.exists()) {
                InputStream resource = NewJFrame.class.getClassLoader().getResourceAsStream("ConfigFile/GeneralCfg.config");
                if (resource != null) {
                    try (InputStream in = resource;
                            OutputStream writer = new BufferedOutputStream(
                                    new FileOutputStream(generalConfig.getAbsolutePath()))) {
                        byte[] buffer = new byte[1024 * 8];
                        int length;
                        while ((length = in.read(buffer)) >= 0) {
                            writer.write(buffer, 0, length);
                        }
                        writer.close();
                        in.close();
                    } catch (Exception e) {
                        logger.error(e.getMessage(), e);
                        //JOptionPane.showMessageDialog(this, e.getMessage());
                    }
                }
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtAddGenre;
    private javax.swing.JButton jBtAddGenre1;
    private javax.swing.JButton jBtAddGenre2;
    private javax.swing.JButton jBtUpdate;
    private javax.swing.JButton jBtUpdate1;
    private javax.swing.JButton jBtVote;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jCBGenre;
    private javax.swing.JCheckBox jCBSubtitle;
    private javax.swing.JCheckBox jCBWatched;
    private javax.swing.JLabel jLDataFrom;
    private javax.swing.JLabel jLRating;
    private javax.swing.JLabel jLTotalPages;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMIExit;
    private javax.swing.JMenuItem jMINewMovies;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTFCurrentPage;
    private javax.swing.JTextField jTFImgUrl;
    private javax.swing.JTextField jTFMovieName;
    private javax.swing.JTextField jTFMovieName2;
    private javax.swing.JTextField jTFMovieNameSearch;
    private javax.swing.JTextField jTFYear;
    private javax.swing.JTextPane jTPGenres;
    private javax.swing.JTextPane jTPGenres1;
    private javax.swing.JTextPane jTPGenres2;
    private javax.swing.JTable jTableMovies;
    private javax.swing.JTextPane jTextPane1;
    private org.vn.movieviewer.config.StarRater starRater1;
    // End of variables declaration//GEN-END:variables

    private void loadMoviesFromDatabase(String conditions) {
        //load list Movies
        String sortStr = "genres ASC";
        this.pagingTable = null;
        this.pagingTable = new PagingTable(daoMainMovie.getIDList(conditions)) {//new ArrayList<Integer>()
//        this.pagingTable = new PagingTable(null) {//new ArrayList<Integer>()

            @Override
            public void AddPageToRowCache() {
                List<MainMovie> mainMovies = daoMainMovie.get(true, conditions, sortStr, this.getStart(), this.getPageOffset());
                if (this.rowCache != null) {
                    this.rowCache.clear();
                } else {
                    this.rowCache = new ArrayList<>();
                }
                for (Iterator<MainMovie> iterator = mainMovies.iterator(); iterator.hasNext();) {
                    MainMovie next = iterator.next();
                    this.rowCache.add(next);
                }
            }
        };
//        lstImportMovies = (List<MainMovie>)this.pagingTable.getRowCache();
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        updatePagingView();
    }

    private void loadConfigInfo() {
        try {
            Properties propertiesFile = Untils.loadPropertiesFile(System.getProperty("user.dir") + File.separator + "GeneralCfg.config");
            if (propertiesFile != null) {
                if (propertiesFile.getProperty("folderReloadPath") != null) {
                    GlobalVariables.folderReloadPath = propertiesFile.getProperty("folderReloadPath");
                }
            }
            logger.info("Kết thúc tải cấu hình.");
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            logger.error("Tải cấu hình bị lỗi.....");
        }
    }

    private void exampleStar() {
//        starRater.setBounds(0, 0, 200, 20);
//        starRater.setEnabled(false);
//        jPanel2.add(starRater);
//        jPanel2.updateUI();
//        this.getContentPane().add(panel);
//        this.pack();
//        this.setVisible(true);

//        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private void loadGenreInfo() {
        List<MainGenre> lstGenre = daoMainGenre.get();
        if (lstGenre == null || lstGenre.size() <= 0) {
            jTPGenres.setText("");
            return;
        }
        if (mapGenre != null) {
            mapGenre.clear();
        }
        genreArray = new String[lstGenre.size() + 1];
        int i = 0;
        genreArray[i++] = "Tất cả";

//        String stringGenres = "";
//        for (int j = 0; j < arrayIdGenreById.length; j++) {
//            stringGenres += mapGenre.get(Integer.parseInt(arrayIdGenreById[j])).getName() + GlobalVariables.separatorComa;
//        }
        for (Iterator<MainGenre> iterator = lstGenre.iterator(); iterator.hasNext();) {
            MainGenre next = iterator.next();
            if (mapGenre == null) {
                mapGenre = new HashMap<>();
            }
            if (!mapGenre.containsKey(next.getIdmainGenre())) {
                mapGenre.put(next.getIdmainGenre(), next);
            }
//            stringGenres += next.getName() + GlobalVariables.separatorComa;
            genreArray[i++] = next.getName();
        }
//        jTPGenres.setText(stringGenres);
        jCBGenre.setModel(new DefaultComboBoxModel(genreArray));
    }

    public void UpdateSelectedGenresLst(String selectedGenresStr) {
        jTPGenres.setText(selectedGenresStr);
        isUpdateGenres = true;
    }

    private void setPanelEnabled(JPanel panel, Boolean isEnabled) {
        panel.setEnabled(isEnabled);

        Component[] components = panel.getComponents();

        for (int i = 0; i < components.length; i++) {
            if (components[i].getClass().getName() == "javax.swing.JPanel") {
                setPanelEnabled((JPanel) components[i], isEnabled);
            }

            components[i].setEnabled(isEnabled);
        }
        starRater1.setEnabled(false);
    }

    private void initFormView() {
        jTFYear.setInputVerifier(Untils.fieldYearReleaseVerifier);
        jTFCurrentPage.setInputVerifier(new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                JTextField temp = (JTextField) input;
                try {
                    int number = Integer.parseInt(temp.getText());
                    if (number < PagingTable.FIRST_PAGE) {
                        JOptionPane.showMessageDialog(null, "Trang phải lớn hơn hoặc bằng " + PagingTable.FIRST_PAGE);
                        return false;
                    } else if (number > pagingTable.getTotalPage()) {
                        JOptionPane.showMessageDialog(null, "Trang phải nhỏ hơn hoặc bằng " + pagingTable.getTotalPage());
                        return false;
                    }
                    return true;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Chỉ được nhập số!");
                }
                return false;
            }
        });
//        starRater1.set
    }

    private void updatePagingView() {
        jLTotalPages.setText("/" + this.pagingTable.getTotalPage());
        jTFCurrentPage.setText(this.pagingTable.getCurentPage() + "");
        if (this.pagingTable.getTotalPage() == 0) {
            jLDataFrom.setText("Không có dữ liệu");
        } else {
            jLDataFrom.setText("Dữ liệu từ " + (this.pagingTable.getStart() + 1) + " - " + this.pagingTable.getLimit() + "/" + this.pagingTable.getTotalRow());
        }
    }

    public void votefortheMovie(int score) {
        MainMovie movieSelected = (MainMovie) pagingTable.getByRow(selectedRow);
        Integer numVote = movieSelected.getIvote() != null ? movieSelected.getIvote() : 0;
        numVote++;
        movieSelected.setIvote(numVote);
        Integer totalScore = movieSelected.getItotalScore() != null ? movieSelected.getItotalScore() : 0;
        totalScore += score;
        movieSelected.setItotalScore(totalScore);
        updateRatingLabel(numVote, totalScore);
    }

    private void updateRatingLabel(Integer numVote, Integer totalScore) {
        if (numVote == 0) {
            starRater1.setRating(0);
            jLRating.setText("0.0 | Votes: 0");
        } else {
            Float rating = totalScore.floatValue() / numVote.floatValue();

            starRater1.setRating(rating);
            jLRating.setText(GlobalVariables.df.format(rating) + " | Votes: " + numVote);
        }
    }
}
