/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.vn.movieviewer.view.main;

//import com.jafregle.Jafregle;
//import com.jafregle.Language;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.vn.movieviewer.renderer.CharsetDetector;
import org.vn.movieviewer.config.GlobalVariables;
import org.vn.movieviewer.config.Utils;
import org.vn.movieviewer.controller.SmartLearningController;
import org.vn.movieviewer.dao.daoSmrtLearning;
import org.vn.movieviewer.dao.daoSysConfig;
import org.vn.movieviewer.renderer.PagingTable;
import org.vn.movieviewer.renderer.TableModelGeneral;
import org.vn.movieviewer.dto.SentenceDto;
import org.vn.movieviewer.dto.SmtLearning;
import org.vn.movieviewer.dto.SysConfig;
import org.vn.movieviewer.renderer.CellColorRenderer;
import org.vn.movieviewer.renderer.SelectAllHeader;
import org.vn.movieviewer.view.GoogleTranslator;
import org.vn.movieviewer.view.dialog.SmartFilter;

/**
 *
 * @author danglph
 */
public class SubtitleCompaireFrm extends javax.swing.JFrame {

    /**
     * Creates new form SubtitleCompaireFrm
     */
    private static Logger logger = Logger.getLogger(SubtitleCompaireFrm.class);
    private PagingTable pagingTable;
    private final static int START_SENTENCE = 0;
    private final static int READ_TIME = 1;
    private final static int READ_CONTENT = 2;
    private final static int END_SENTENCE = 3;
    private final static int COLUMN_ENG = 1;
    private final static int COLUMN_VIE = 2;
    private final static int COLUMN_CHK_TRANS = 4;
    private Map<Integer, SentenceDto> mapSentenceDto = null;
    private TableModelGeneral tableModelSubtitle;
    private int[] selectedRows;
    private int[] selectedColumn;
    List<String> lstSaveTrans = null;
//    private Jafregle jafregle = new Jafregle(Language.ENGLISH, Language.VIETNAM);
//    private GoogleTranslator translator = new GoogleTranslator();

    public SubtitleCompaireFrm(JFrame parent, boolean modal) {
//        super(parent, modal);
    }

    public SubtitleCompaireFrm() {
        initComponents();
        this.setTitle("Biên tập phụ đề");
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
//        jTFSubEngFolderPath.setText(GlobalVariables.folderSrt);
        loadEncode();
        loadPath();
        String[] columnNames = {
            "Dòng", "Sub 1", "Sub 2", "Giống nhau", "Đã dịch", "Dịch Gôgle"
        };
        initTableListenner(columnNames);
        jTFCurrentPage.setInputVerifier(new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                JTextField temp = (JTextField) input;
                try {
                    int number = Integer.parseInt(temp.getText());
                    if (number < PagingTable.FIRST_PAGE) {
                        JOptionPane.showMessageDialog(null, "Trang phải lớn hơn hoặc bằng " + PagingTable.FIRST_PAGE);
                        return false;
                    } else if (number > pagingTable.getTotalPage()) {
                        JOptionPane.showMessageDialog(null, "Trang phải nhỏ hơn hoặc bằng " + pagingTable.getTotalPage());
                        return false;
                    }
                    return true;
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Chỉ được nhập số!");
                }
                return false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTFSubEngFolderPath = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTFSubVieFolderPath = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jCboCharsetEngFile = new javax.swing.JComboBox<>();
        jCboCharsetVieFile = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jTFCurrentPage = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLTotalPages = new javax.swing.JLabel();
        jLDataFrom = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jBSaveEng = new javax.swing.JButton();
        jBSaveVie = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Chọn file");

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_Open_1493293.png"))); // NOI18N
        jButton5.setText("Mở thư mục");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_view-refresh_15329.png"))); // NOI18N
        jButton6.setText("Tải file");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Chọn file Vie");

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_Open_1493293.png"))); // NOI18N
        jButton7.setText("Mở thư mục");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTFSubEngFolderPath, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addComponent(jTFSubVieFolderPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCboCharsetVieFile, 0, 83, Short.MAX_VALUE)
                    .addComponent(jCboCharsetEngFile, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6))
                    .addComponent(jButton5))
                .addContainerGap(267, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFSubEngFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jCboCharsetEngFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTFSubVieFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7)
                    .addComponent(jButton6)
                    .addComponent(jCboCharsetVieFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jTFCurrentPage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFCurrentPage.setText("2");
        jTFCurrentPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCurrentPageActionPerformed(evt);
            }
        });

        jButton1.setText("<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("|<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(">");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(">>|");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLTotalPages.setText("/10");
        jLTotalPages.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLDataFrom.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLDataFrom.setText("Dữ liệu từ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFCurrentPage, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(128, 128, 128)
                .addComponent(jLDataFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCurrentPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLDataFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTable1);

        jButton8.setText("Insert");

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/delete-icon.png"))); // NOI18N
        jButton9.setText("Delete");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_page_copy_5551.png"))); // NOI18N
        jButton10.setText("Copy to");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Save all");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jBSaveEng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_stock_save_20659.png"))); // NOI18N
        jBSaveEng.setText("Save Eng file");
        jBSaveEng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaveEngActionPerformed(evt);
            }
        });

        jBSaveVie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_stock_save_20659.png"))); // NOI18N
        jBSaveVie.setText("Save Vie file");
        jBSaveVie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaveVieActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Lưu vào đường dẫn đã chọn");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBSaveEng)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBSaveVie)
                .addGap(10, 10, 10)
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jBSaveEng)
                    .addComponent(jBSaveVie)
                    .addComponent(jCheckBox1)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(424, 424, 424))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.prevPage();
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (this.pagingTable.getCurentPage() != PagingTable.FIRST_PAGE) {
            this.pagingTable.setCurentPage(PagingTable.FIRST_PAGE);
            initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
            Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.pagingTable.nextPage();
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (this.pagingTable.getCurentPage() != this.pagingTable.getTotalPage()) {
            this.pagingTable.setCurentPage(this.pagingTable.getTotalPage());
            initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
            Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (openSubFolder(jTFSubEngFolderPath, true)) {
            jTFSubVieFolderPath.setText("");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private Charset getFileCharset(File tempFile){
        Charset c = Charset.defaultCharset();
        try {
            c = CharsetDetector.detectCharset(tempFile);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return Charset.defaultCharset();
        }
        return c;
    }
    
    private boolean openSubFolder(JTextField jTextField, boolean isEng) {
        JFileChooser fc = new JFileChooser(jTextField.getText().equals("") ? "" : jTextField.getText());
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Subtitle FILES", "srt", "text");
        File tempFile = new File(jTextField.getText());
        if(tempFile.isDirectory()){
            fc.setCurrentDirectory(tempFile);
        }else{
            fc.setCurrentDirectory(tempFile.getParentFile());
        }
        fc.setFileFilter(filter);
        boolean result = false;
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File file = fc.getSelectedFile();
            if (file.isFile()) {
                jTextField.setText(file.getPath());
                Charset c = getFileCharset(file);
                if (isEng) {
                    jCboCharsetEngFile.setSelectedItem(c.displayName());
                    result = true;
                } else if (!isEng) {
                    jCboCharsetVieFile.setSelectedItem(c.displayName());
                }
            } else if (file.isDirectory()) {
                //Select folder
                // calculator folder
                Utils.printFolderSize(file);
            }
        }
        return result;
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        if (jTFSubEngFolderPath.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Chưa có file phụ đề!!!");
            return;
        }

        if (true)//is load save Tranlated
        {
            lstSaveTrans = null;
            List<SmtLearning> smartLearning = daoSmrtLearning.getByAction(SmartLearningController.SAVE_TRANS);
            if (smartLearning != null) {
                lstSaveTrans = Arrays.asList(smartLearning.get(0).getSmtValue1().split(GlobalVariables.separatorSemicolon));
            }
        }

        loadSubEng(jTFSubEngFolderPath);
        loadSubVie(jTFSubVieFolderPath);

        SmartFilter smartFilter = new SmartFilter(this, true, mapSentenceDto);
        if (smartFilter.existData()) {
            smartFilter.setLocationRelativeTo(null);
            smartFilter.setVisible(true);
        }

        loadSubtitleMoviesFromFile(mapSentenceDto);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        openSubFolder(jTFSubVieFolderPath, false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jBSaveEngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaveEngActionPerformed
        // TODO add your handling code here:
        writeToFile(jCheckBox1.isSelected() ? jTFSubEngFolderPath.getText() : GlobalVariables.pathToSaveEngSrt, true);
        this.jBSaveEng.setText("Save Eng file");
    }//GEN-LAST:event_jBSaveEngActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        /*
        1. Lấy ra những ô đã chọn cho vào mảng các dòng
        1.1 Xóa các dòng(gán giá trị "")
        2. tạo hàm tìm vị trí mới của dòng với tham số: (mảng các dòng đã chọn, vị trí dòng cũ), trả về vị trí dòng mới
        3. duyệt mapSentenceDto gọi hàm ở 2. truyền vào vị trí dòng(key), lấy ra vị trí mới(luôn lớn hơn 1 và nhỏ hơn vị trí cũ)
        4. cập nhật nội dung vào 
         */
        if (!getSelectedCells()) {
            return;
        }

        int newPosition = 0;
        updateIndexBymapSentence(selectedRows);
        int minRow = getMinrow(selectedRows);
        boolean isSelectColEng = selectedColumn[0] == 1;//cột 1 là cột Eng, cột 2 là cột Vie

        clearValueAtDeletedRows(selectedRows, isSelectColEng);

        for (int oldPos = minRow + 1; oldPos <= mapSentenceDto.size(); oldPos++) {
            newPosition = getNewPosition(selectedRows, oldPos);
            if (newPosition > oldPos) {
                logger.error(newPosition + " ~ " + oldPos);
            } else if (newPosition == oldPos) {
                logger.debug(newPosition + " ~ " + oldPos);

                if (isSelectColEng) {
                    mapSentenceDto.get(newPosition).initContent("");
                    mapSentenceDto.get(newPosition).compaireContent();
                } else {
                    mapSentenceDto.get(newPosition).initContentTranslate("");
                    mapSentenceDto.get(newPosition).compaireContent();
                }
            } else {
                if (isSelectColEng) {
                    mapSentenceDto.get(newPosition).initContent(mapSentenceDto.get(oldPos).getContent().toString());
                    mapSentenceDto.get(newPosition).compaireContent();
//                    mapSentenceDto.get(newPosition).setContent(mapSentenceDto.get(oldPos).getContent().toString());
                } else {
                    mapSentenceDto.get(newPosition).initContentTranslate(mapSentenceDto.get(oldPos).getContentTranslate().toString());
                    mapSentenceDto.get(newPosition).compaireContent();
//                    mapSentenceDto.get(newPosition).setContentTranslate(mapSentenceDto.get(oldPos).getContentTranslate().toString());
                }
            }
        }

        if (newPosition < mapSentenceDto.size()) {
            for (int i = newPosition + 1; i <= mapSentenceDto.size(); i++) {
                if (isSelectColEng) {
                    mapSentenceDto.get(i).initContent("");
                    mapSentenceDto.get(i).compaireContent();
                } else {
                    mapSentenceDto.get(i).initContentTranslate("");
                    mapSentenceDto.get(i).compaireContent();
                }
            }
        }

        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        if (isSelectColEng) {
            this.jBSaveEng.setText("Save Eng file *");
        } else {
            this.jBSaveVie.setText("Save Vie file *");
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jBSaveVieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaveVieActionPerformed
        // TODO add your handling code here:
        writeToFile(jCheckBox1.isSelected() ? jTFSubVieFolderPath.getText() : GlobalVariables.pathToSaveVieSrt, false);
        this.jBSaveVie.setText("Save Vie file");
    }//GEN-LAST:event_jBSaveVieActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        writeToFile(GlobalVariables.pathToSaveEngSrt, true);
        writeToFile(GlobalVariables.pathToSaveVieSrt, false);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTFCurrentPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCurrentPageActionPerformed
        // TODO add your handling code here:
        try {
            this.pagingTable.setCurentPage(Integer.parseInt(jTFCurrentPage.getText()));
            initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
            Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }

    }//GEN-LAST:event_jTFCurrentPageActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        if (!getSelectedCells()) {
            return;
        }
        boolean isSelectColEng = this.selectedColumn[0] == 1;//cột 1 là cột Eng, cột 2 là cột Vie
        int rowIndex = 0;
        for (int i = 0; i < this.selectedRows.length; i++) {
            rowIndex = (int) this.tableModelSubtitle.getValueAt(this.selectedRows[i], 0);
            if (isSelectColEng) {
                mapSentenceDto.get(rowIndex).initContentTranslate(mapSentenceDto.get(rowIndex).getContent().toString());
                mapSentenceDto.get(rowIndex).compaireContent();
                this.tableModelSubtitle.setValueAt(mapSentenceDto.get(rowIndex).getContentTranslate(), this.selectedRows[i], 2);
            } else {
                mapSentenceDto.get(rowIndex).initContent(mapSentenceDto.get(rowIndex).getContentTranslate().toString());
                mapSentenceDto.get(rowIndex).compaireContent();
                this.tableModelSubtitle.setValueAt(mapSentenceDto.get(rowIndex).getContent(), this.selectedRows[i], 1);
            }
        }
        if (isSelectColEng) {
            this.jBSaveVie.setText("Save Vie file *");
        } else {
            this.jBSaveEng.setText("Save Eng file *");
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        String key = "lastEngFolder";
        GlobalVariables.folderEngReloadPath = jTFSubEngFolderPath.getText();
        GlobalVariables.folderVieReloadPath = jTFSubVieFolderPath.getText();
        SysConfig sysConfig = daoSysConfig.getByKey(key);
        if (sysConfig == null) {
            daoSysConfig.insert(key, GlobalVariables.folderEngReloadPath, "");
        } else {
            sysConfig.setValue1(GlobalVariables.folderEngReloadPath);
            daoSysConfig.update(sysConfig);
        }
        key = "lastVieFolder";
        sysConfig = daoSysConfig.getByKey(key);
        if (sysConfig == null) {
            daoSysConfig.insert(key, GlobalVariables.folderVieReloadPath, "");
        } else {
            sysConfig.setValue1(GlobalVariables.folderVieReloadPath);
            daoSysConfig.update(sysConfig);
        }
        List<SmtLearning> learnings = daoSmrtLearning.getByAction(SmartLearningController.SAVE_TRANS);
        SmtLearning fstlearning = null;
        if (learnings != null && learnings.size() > 0) {
            fstlearning = learnings.get(0);
        } else {
            fstlearning = new SmtLearning();
        }
        fstlearning.setSmtAction(SmartLearningController.SAVE_TRANS);
        fstlearning.setSmtValue1(getTranslatedSentence(this.mapSentenceDto));
        daoSmrtLearning.insertOrUpdate(fstlearning);

//        SmartLearningController.learn(SmartLearningController.SAVE_TRANS, key);
    }//GEN-LAST:event_formWindowClosing

    private int getNewPosition(int[] arrSelectedRows, int oldIndex) {
        int newIndex = oldIndex;

        for (int i = arrSelectedRows.length - 1; i >= 0; i--) {
            int selectedRow = arrSelectedRows[i];
            if (oldIndex == selectedRow) {
                return oldIndex;
            } else if (oldIndex > selectedRow) {
                newIndex--;
            }
        }

        return newIndex;
    }

    private List<Integer> daoSubtitleGetIDList(Map<Integer, SentenceDto> lstSentenceDto) {
        List<Integer> lstId = new ArrayList<>();
        for (Map.Entry<Integer, SentenceDto> entry : lstSentenceDto.entrySet()) {
            Integer key = entry.getKey();
            lstId.add(key);
        }
        return lstId;
    }

    private List<SentenceDto> daoSubtitleGet(boolean b, String string, String string0, int start, int pageOffset, Map<Integer, SentenceDto> lstSentenceDto) {
        List<SentenceDto> lstSequenceInPage = new ArrayList<>();
        int startRow = start + 1;
        int endRow = Integer.min(mapSentenceDto.size() + 1, startRow + pageOffset);
        for (int i = startRow; i < endRow; i++) {
            if (!mapSentenceDto.containsKey(i)) {
                logger.debug("Stop, map size = " + mapSentenceDto.size() + "~" + i);
                break;
            }
            lstSequenceInPage.add(mapSentenceDto.get(i));
        }
        return lstSequenceInPage;
    }

    private void loadSubtitleMoviesFromFile(Map<Integer, SentenceDto> lstSentenceDto) {
        //load subtitle from file
        this.pagingTable = null;
        this.pagingTable = new PagingTable(daoSubtitleGetIDList(lstSentenceDto)) {//new ArrayList<Integer>()
//        this.pagingTable = new PagingTable(null) {//new ArrayList<Integer>()

            @Override
            public boolean AddPageToRowCache() {
                List<SentenceDto> lstSequenceInPage = daoSubtitleGet(true, "", "", this.getStart(), this.getPageOffset(), lstSentenceDto);
                if (this.rowCache != null) {
                    this.rowCache.clear();
                } else {
                    this.rowCache = new ArrayList<>();
                }
                for (Iterator<SentenceDto> iterator = lstSequenceInPage.iterator(); iterator.hasNext();) {
                    SentenceDto next = iterator.next();
                    this.rowCache.add(next);
                }
                return true;
            }
        };
//        lstImportMovies = (List<MainMovie>)this.pagingTable.getRowCache();
        initTableDataType(this.pagingTable.getRowCache(), this.pagingTable.getStart());
        Utils.updatePagingView(this.pagingTable, this.jLTotalPages, this.jLDataFrom, this.jTFCurrentPage);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        System.out.print(StringUtils.isNumeric("1"));
        logger.debug(">>>>>");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubtitleCompaireFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubtitleCompaireFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubtitleCompaireFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubtitleCompaireFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SubtitleCompaireFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBSaveEng;
    private javax.swing.JButton jBSaveVie;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jCboCharsetEngFile;
    private javax.swing.JComboBox<String> jCboCharsetVieFile;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLDataFrom;
    private javax.swing.JLabel jLTotalPages;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCurrentPage;
    private javax.swing.JTextField jTFSubEngFolderPath;
    private javax.swing.JTextField jTFSubVieFolderPath;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
//
//    private void updatePagingView() {
//        jLTotalPages.setText("/" + this.pagingTable.getTotalPage());
//        jTFCurrentPage.setText(this.pagingTable.getCurentPage() + "");
//        if (this.pagingTable.getTotalPage() == 0) {
//            jLDataFrom.setText("Không có dữ liệu");
//        } else {
//            jLDataFrom.setText("Dữ liệu từ " + (this.pagingTable.getStart() + 1) + " - " + this.pagingTable.getLimit() + "/" + this.pagingTable.getTotalRow());
//        }
//    }

    private void initTableDataType(List<Object> lstObject, int start) {

        this.tableModelSubtitle.getDataVector().removeAllElements();
        if (lstObject != null && !lstObject.isEmpty()) {
            Object[] moviesData = null;
//          "Dòng", "Sub 1", "Sub 2", "Giống nhau", "Đã dịch", "Dịch Gôgle"
            for (int i = 0; i < lstObject.size(); i++) {
                moviesData = new Object[this.tableModelSubtitle.getColumnCount()];
                SentenceDto sentenceDto = (SentenceDto) lstObject.get(i);
                moviesData[0] = sentenceDto.getRowNumber();
                moviesData[1] = sentenceDto.getContent();
                moviesData[2] = sentenceDto.getContentTranslate();
                moviesData[3] = sentenceDto.getIsDifferent();
                moviesData[4] = sentenceDto.getIsTranslate();
                moviesData[5] = "TRANSLATE";
                tableModelSubtitle.addRow(moviesData);
            }
        }
        this.jTable1.updateUI();
    }

    private void initTableListenner(String[] columnNames) {
        //init tableview

        this.tableModelSubtitle = new TableModelGeneral(columnNames) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
//           "Dòng", "Sub 1", "Sub 2", "Giống nhau", "Đã dịch"
                Class clazz = Object.class;
                switch (columnIndex) {
                    case 4:
                        clazz = Boolean.class;
                        break;
//                    case 2:
//                        clazz = StarRater.class;
//                        break;
//                    case 4:
//                        clazz = Date.class;
//                        break;
//                    case 5:
//                        clazz = ImageIcon.class;
//                        break;

                }
                return clazz;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 1 || column == 2 || column == 4;
            }

            @Override
            public void setValueAt(Object value, int row, int column) {
                super.setValueAt(value, row, column);
                UpdateToMap(value, row, column);
            }
//            @Override
//            public int getRowCount() {
//                return daoMainMovie.getRowCount();
//            }
        };
//        this.tableModelSubtitle.addTableModelListener(new TableModelListenerChangeValue() {
//
//            @Override
//            public void tableChanged(TableModelEvent e) {
//                int row = e.getFirstRow();
//                int column = e.getColumn();
//                if (column > 0) {
//                    TableModelGeneral model = (TableModelGeneral) e.getSource();
//                    try {
//                        Object value = model.getValueAt(row, column);
//                        UpdateToMap(value, row, column);
//                    } catch (Exception ec) {
//                        logger.error(ec.getMessage(), ec);
//                    }
//                }
//            }
//        });
        this.jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                int col = jTable1.columnAtPoint(evt.getPoint());
                if (row >= 0 && col == 5) {
                    int returnValue = JOptionPane.showConfirmDialog(null, "Bạn muốn dịch bằng Gôgle?", "Dịch Eng->Vie", JOptionPane.YES_NO_OPTION);
                    if(returnValue == JOptionPane.YES_OPTION){
                        try {
                            TableModelGeneral model = tableModelSubtitle;
                            Object value = model.getValueAt(row, COLUMN_ENG);
                            logger.info(">>>" + value);
                            String result = translateLocal(value.toString());
                            logger.debug(value + " - Translate- " + result);
                            model.setValueAt(result, row, COLUMN_VIE);
                            UpdateToMap(result, row, COLUMN_VIE);
                        } catch (Exception ec) {
                            logger.error(ec.getMessage(), ec);
                        }
                        
                    }
                }
            }
            
        });
        this.jTable1.setDefaultRenderer(Object.class, new CellColorRenderer());
        this.jTable1.setModel(tableModelSubtitle);
        this.jTable1.setRowHeight(30);

        TableColumn column0 = this.jTable1.getColumnModel().getColumn(0);
        TableColumn column1 = this.jTable1.getColumnModel().getColumn(1);
        TableColumn column2 = this.jTable1.getColumnModel().getColumn(2);        
        TableColumn column3 = this.jTable1.getColumnModel().getColumn(3);
        TableColumn column4 = this.jTable1.getColumnModel().getColumn(4);
        column4.setHeaderRenderer(new SelectAllHeader(this.jTable1, 4));
        column0.setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                if ((boolean) table.getModel().getValueAt(row, 4)) {
                    setBackground(new Color(72, 88, 255));// màu xanh dương
                } else {
                    setBackground(new Color(253, 253, 253));// màu xasm
                }

                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                        row, col);
            }
        });
        column0.setPreferredWidth(60);
        column1.setPreferredWidth(500);
        column2.setPreferredWidth(500);
        column3.setPreferredWidth(100);
        column4.setPreferredWidth(100);
        this.jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);//AUTO_RESIZE_LAST_COLUMN);
//
//        TableColumn column1 = this.jTable1.getColumnModel().getColumn(1);
//        column1.setMinWidth(300);
//        column1.setCellRenderer(new DefaultTableCellRenderer() {
//
//            @Override
//            public Component getTableCellRendererComponent(
//                    JTable table, Object value,
//                    boolean isSelected, boolean hasFocus,
//                    int row, int column) {
//                JLabel c = (JLabel) super.getTableCellRendererComponent(table, value,
//                        isSelected, hasFocus,
//                        row, column);/// params from above 
//                int rowAfterSorted = table.convertRowIndexToModel(row);
////                Integer idMovie = (Integer)table.getModel().getValueAt(rowAfterSorted, 5);
//                MainMovie mainMovie = (MainMovie) pagingTable.getByRow(rowAfterSorted);
//                String url = mainMovie.getPosterUrl();
//                if (url == null) {
//                    url = "";
//                }
//                String html
//                        = "<html><body>"
//                        + "<img src='"
//                        //                        + "https://images-na.ssl-images-amazon.com/images/M/MV5BMzMxMTFlMDYtNjIyNS00YzQ4LWJlMDAtNGQwY2RlZGJiMmM1XkEyXkFqcGdeQXVyNzEyMTA5MTU@._V1_SY1000_SX700_AL_.jpg"
//                        + url
//                        + "'  width=240 height=320> ";
//                c.setToolTipText(html + "<br/>"
//                        + "</body></html>");
//                return c;
//            }
//        });
//        this.jTable1.setDefaultRenderer(Object.class, new CellColorRenderer());
        column3.setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                if ((boolean) table.getModel().getValueAt(row, 3)) {
                    setBackground(new Color(122, 255, 104));// 7AFF68 màu canh lá
                } else {
                    setBackground(new Color(255, 91, 71));// FF5B47 màu cam
                }

                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                        row, col);
            }
        });
    }

    private void loadSubVie(JTextField jTFSubFolderPath) {
        //Sub Eng exist and mapSentenceDto not null
        String line = null;
        String result = "";
        Integer key = 0;
        SentenceDto sentenceDto = null;
        try {
//            File f = new File(jTFSubFolderPath.getText());
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(jTFSubFolderPath.getText());
            } catch (FileNotFoundException e) {
                int returnValue = JOptionPane.showConfirmDialog(null, "File Vie không tồn tại hoặc chưa chọn. Bạn muốn tạo file Vie mặc định?", "Lỗi tải file Vie", JOptionPane.YES_NO_CANCEL_OPTION);
                switch (returnValue) {
                    case JOptionPane.YES_OPTION:
                        this.jTFSubVieFolderPath.setText(this.jTFSubEngFolderPath.getText() + ".vie");
                        if (mapSentenceDto == null) {
                            JOptionPane.showMessageDialog(null, "Chưa có file phụ đề Eng!!!");
                            return;
                        }
                        for (Map.Entry<Integer, SentenceDto> entry : mapSentenceDto.entrySet()) {
                            key = entry.getKey();
                            sentenceDto = entry.getValue();

//                            result = translateLocal(sentenceDto.getContent().toString());
//                            logger.debug(sentenceDto.getContent().toString() + " - Translate- " + result);
                            result = sentenceDto.getContent().toString();
                            sentenceDto.initContentTranslate(result);
                            sentenceDto.compaireContent();
                        }
                        return;
                    case JOptionPane.NO_OPTION:
                        return;
                    case JOptionPane.CANCEL_OPTION:
                        return;
                }
            }

//            Charset c = CharsetDetector.detectCharset(f);
            Charset c = Charset.forName((String) jCboCharsetVieFile.getSelectedItem());

            InputStreamReader subFile = new InputStreamReader(
                    fileInputStream, c);
//                    CharsetDetector.detectCharset(f));
            BufferedReader bufferedReader = new BufferedReader(subFile);
            if (mapSentenceDto == null) {
                JOptionPane.showMessageDialog(null, "Chưa có file phụ đề Eng!!!");
                return;
            }
            int stateRead = START_SENTENCE;
            rowSentence = 0;
            sentenceDto = null;
            while ((line = bufferedReader.readLine()) != null) {
                if (line.equals("") && stateRead != READ_CONTENT) {
                    continue;
                }
                stateRead = proccessLine(stateRead, line);
            }
            // Always close files.
            bufferedReader.close();
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }
    private SentenceDto sentenceDto = null;
    private int rowSentence = 0;

    private int proccessLine(int stateRead, String line) {

        switch (stateRead) {
            case START_SENTENCE:
                if (StringUtils.isNumeric(line.trim()) || (sentenceDto == null)) {
                    if (sentenceDto == null) {
                        rowSentence = 1;
                    } else {
                        rowSentence = Integer.parseInt(line);
                    }
                    sentenceDto = mapSentenceDto.get(rowSentence);
                    if (sentenceDto == null) {
                        sentenceDto = new SentenceDto(rowSentence);
                        sentenceDto.setRowNumber(rowSentence);
                        mapSentenceDto.put(rowSentence, sentenceDto);
                    }
                    stateRead = READ_TIME;
                }
                break;
            case READ_TIME:
                if (line.contains(" --> ") && line.contains(":") && line.contains(",")) {
                    if (sentenceDto.getTimeString() == null || sentenceDto.getTimeString().equals("")) {
                        sentenceDto.setTimeString(line);
                    }
                    stateRead = READ_CONTENT;
                }
                break;
            case READ_CONTENT:
                if (line.equals("")) {
                    sentenceDto.compaireContent();
                    stateRead = END_SENTENCE;
                    stateRead = START_SENTENCE;
//                            mapSentenceDto.put(sentenceDto.getRowNumber(), sentenceDto);
                } else if (line.equals((sentenceDto.getRowNumber() + 1) + "")) {
                    sentenceDto.compaireContent();
                    stateRead = END_SENTENCE;
                    stateRead = START_SENTENCE;
                    stateRead = proccessLine(stateRead, line);
                } else {
                    sentenceDto.setContentTranslate(sentenceDto.getContentTranslate().length() == 0 ? line
                            : GlobalVariables.separatorBreakLine + line);
                }
                break;
            case END_SENTENCE:
                break;
        }
        return stateRead;
    }

    private void loadSubEng(JTextField jTFSubFolderPath) {
        String line = null;
        try {
            File f = new File(jTFSubFolderPath.getText());
            Charset c = CharsetDetector.detectCharset(f);
            c = Charset.forName((String) jCboCharsetEngFile.getSelectedItem());

            InputStreamReader subFile = new InputStreamReader(
                    new FileInputStream(f),
                    //                    new FileInputStream(jTFSubFolderPath.getText()),
                    c);
            BufferedReader bufferedReader = new BufferedReader(subFile);

            if (mapSentenceDto != null) {
                mapSentenceDto.clear();
            }

            if (mapSentenceDto == null) {
                mapSentenceDto = new HashMap<>();
            }
            SentenceDto sentenceDto = null;
            int stateRead = START_SENTENCE;

            while ((line = bufferedReader.readLine()) != null) {
                if (line.equals("") && stateRead != READ_CONTENT) {
                    continue;
                }
                switch (stateRead) {
                    case START_SENTENCE:
                        if (StringUtils.isNumeric(line.trim()) || (mapSentenceDto.size() == 0 && sentenceDto == null)) {
                            sentenceDto = new SentenceDto();
                            if (mapSentenceDto.size() == 0) {
                                sentenceDto.setRowNumber(1);
                            } else {
//                                if(Integer.parseInt(line) == 1508){
//                                    logger.debug(line);
//                                }
                                sentenceDto.setRowNumber(Integer.parseInt(line));
                            }
                            sentenceDto.setIsTranslate(lstSaveTrans != null && lstSaveTrans.size() > 0 ? lstSaveTrans.contains(sentenceDto.getRowNumber() + "") : false);
                            mapSentenceDto.put(sentenceDto.getRowNumber(), sentenceDto);
                            stateRead = READ_TIME;
                        }
                        break;
                    case READ_TIME:
                        if (line.contains(" --> ") && line.contains(":") && line.contains(",")) {
                            sentenceDto.setTimeString(line);
                            stateRead = READ_CONTENT;
                        }
                        break;
                    case READ_CONTENT:
                        if (line.equals("")) {
                            stateRead = END_SENTENCE;
                            stateRead = START_SENTENCE;
                        } else {
                            sentenceDto.setContent(sentenceDto.getContent().length() == 0 ? line
                                    : GlobalVariables.separatorBreakLine + line);
                        }
                        break;
                    case END_SENTENCE:

                        break;
                }
            }
            // Always close files.
            bufferedReader.close();
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }

    private int getMinrow(int[] selectedRows) {

        Arrays.sort(selectedRows);
        return selectedRows[0];
    }

    private void updateIndexBymapSentence(int[] selectedRows) {
        for (int i = 0; i < selectedRows.length; i++) {
            SentenceDto sentenceDto = ((SentenceDto) this.pagingTable.getByRow(selectedRows[i]));
            selectedRows[i] = sentenceDto.getRowNumber();
        }
    }

    private void clearValueAtDeletedRows(int[] selectedRows, boolean deleteRowEng) {
        for (int i = 0; i < selectedRows.length; i++) {
            SentenceDto sentenceDto = mapSentenceDto.get(selectedRows[i]);

            if (deleteRowEng) {
                SmartLearningController.learn(SmartLearningController.DELETE, sentenceDto.getContent().toString());
                sentenceDto.initContent("");
                sentenceDto.compaireContent();
            } else {
                SmartLearningController.learn(SmartLearningController.DELETE, sentenceDto.getContentTranslate().toString());
                sentenceDto.initContentTranslate("");
                sentenceDto.compaireContent();
            }
        }
    }

    private void UpdateToMap(Object value, int row, int col) {
        SentenceDto sentenceDto = (SentenceDto) this.pagingTable.getByRow(row);
        if (col == COLUMN_ENG) {
            sentenceDto.initContent(value.toString());
            sentenceDto.compaireContent();
            this.jBSaveEng.setText("Save Eng file *");
        } else if (col == COLUMN_VIE) {
            sentenceDto.initContentTranslate(value.toString());
            sentenceDto.compaireContent();
            this.jBSaveVie.setText("Save Vie file *");
        } else if (col == COLUMN_CHK_TRANS) {
            sentenceDto.setIsTranslate((Boolean) value);
        } else {
            logger.debug("Change value at: [" + row + "," + col + "]");
        }
    }

    private void writeToFile(String pathToFile, boolean isEng) {
        Path path = Paths.get(pathToFile);

        Charset ENCODING = Charset.forName(
                !isEng ? (String) jCboCharsetVieFile.getSelectedItem()
                        : (String) jCboCharsetEngFile.getSelectedItem());

//        Charset ENCODING = StandardCharsets.UTF_16;
        try {
            BufferedWriter writer = Files.newBufferedWriter(path, ENCODING);
            for (Map.Entry<Integer, SentenceDto> entry : mapSentenceDto.entrySet()) {
                Integer key = entry.getKey();
                SentenceDto value = entry.getValue();
                String saveContent = "";
                if (isEng) {
                    saveContent = value.getContent().toString().equals("") ? "" : value.getContent().toString();
                } else {
                    saveContent = value.getContentTranslate().toString().equals("") ? "" : value.getContentTranslate().toString();
                }

                if (!saveContent.equals("")) {
                    writer.write(value.getRowNumber() + "");
                    writer.newLine();
                    writer.write(value.getTimeString());
//                    try {
//                        
//                    } catch (Exception e) {
//                        logger.error(e.getMessage(), e);
//                    }
                    writer.newLine();
                    writer.write(saveContent);
                    writer.newLine();
                    writer.newLine();
                }
            }

            writer.flush();
            writer.close();
        } catch (IOException ex) {
            logger.error(ex.getMessage(), ex);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }

    public void UpdateSub(List<Integer> lstDeleteIndex) {
        boolean deleteRowEng = true;
        int[] selectedRows = ArrayUtils.toPrimitive(lstDeleteIndex.toArray(new Integer[0]));
        clearValueAtDeletedRows(selectedRows, deleteRowEng);
        int newPosition = 0;
        int minRow = getMinrow(selectedRows);

        for (int oldPos = minRow + 1; oldPos <= mapSentenceDto.size(); oldPos++) {
            newPosition = getNewPosition(selectedRows, oldPos);
            if (newPosition > oldPos) {
                logger.error(newPosition + " ~ " + oldPos);
            } else if (newPosition == oldPos) {
//                logger.debug(newPosition + " ~ " + oldPos);

                if (deleteRowEng) {
                    mapSentenceDto.get(newPosition).initContent("");
                    mapSentenceDto.get(newPosition).compaireContent();
                } else {
                    mapSentenceDto.get(newPosition).initContentTranslate("");
                    mapSentenceDto.get(newPosition).compaireContent();
                }
            } else {
                if (deleteRowEng) {
                    mapSentenceDto.get(newPosition).initContent(mapSentenceDto.get(oldPos).getContent().toString());
                    mapSentenceDto.get(newPosition).compaireContent();
//                    mapSentenceDto.get(newPosition).setContent(mapSentenceDto.get(oldPos).getContent().toString());
                } else {
                    mapSentenceDto.get(newPosition).initContentTranslate(mapSentenceDto.get(oldPos).getContentTranslate().toString());
                    mapSentenceDto.get(newPosition).compaireContent();
//                    mapSentenceDto.get(newPosition).setContentTranslate(mapSentenceDto.get(oldPos).getContentTranslate().toString());
                }
            }
        }

        if (newPosition < mapSentenceDto.size()) {
            for (int i = newPosition + 1; i <= mapSentenceDto.size(); i++) {
                if (deleteRowEng) {
                    mapSentenceDto.get(i).initContent("");
                    mapSentenceDto.get(i).compaireContent();
                } else {
                    mapSentenceDto.get(i).initContentTranslate("");
                    mapSentenceDto.get(i).compaireContent();
                }
            }
        }
    }

    private boolean getSelectedCells() {
        selectedColumn = this.jTable1.getSelectedColumns();
        selectedRows = this.jTable1.getSelectedRows();
        if (selectedColumn.length != 1 || selectedRows.length <= 0) {
            JOptionPane.showMessageDialog(null, "Chưa chọn ô để xóa, chỉ được chọn các ô cùng 1 cột!!!");
            return false;
        }
        return true;
    }

    private void loadPath() {
        SysConfig sysConfig = daoSysConfig.getByKey(GlobalVariables.lastEngFolder_key);
        if (sysConfig != null) {
            GlobalVariables.folderEngReloadPath = sysConfig.getValue1();
        }
        jTFSubEngFolderPath.setText(
                GlobalVariables.folderEngReloadPath.equals("") ? GlobalVariables.folderSrt + "\\2The.Little.Hours.2017.720p.BluRay.X264-AMIABLE.srt" : GlobalVariables.folderEngReloadPath);
        sysConfig = daoSysConfig.getByKey(GlobalVariables.lastVieFolder_key);
        File tempFile = new File(jTFSubEngFolderPath.getText());
        Charset c = getFileCharset(tempFile);
        jCboCharsetEngFile.setSelectedItem(c.displayName());
        
        if (sysConfig != null) {
            GlobalVariables.folderVieReloadPath = sysConfig.getValue1();
        }
        jTFSubVieFolderPath.setText(
                GlobalVariables.folderVieReloadPath.equals("") ? GlobalVariables.folderSrt + "\\The.Little.Hours.2017.720p.BluRay.X264-AMIABLE.srt" : GlobalVariables.folderVieReloadPath);
        tempFile = new File(jTFSubVieFolderPath.getText());
        c = getFileCharset(tempFile);
        jCboCharsetVieFile.setSelectedItem(c.displayName());
    }

    private String getTranslatedSentence(Map<Integer, SentenceDto> mapSentenceDto) {

        String tranlatedSentencesStr = "";
        if (mapSentenceDto != null) {
            for (Map.Entry<Integer, SentenceDto> entry : mapSentenceDto.entrySet()) {
                Integer key = entry.getKey();
                SentenceDto value = entry.getValue();
                if (value.getIsTranslate()) {
                    tranlatedSentencesStr += value.getRowNumber() + GlobalVariables.separatorSemicolon;
                }
            }
        }
        return tranlatedSentencesStr;
    }

    private void loadEncode() {
        SortedMap<String, Charset> iterator = Charset.availableCharsets();
        for (Map.Entry<String, Charset> entry : iterator.entrySet()) {
            String key = entry.getKey();
            Charset value = entry.getValue();
            jCboCharsetEngFile.addItem(key);
            jCboCharsetVieFile.addItem(key);
//            logger.debug(">>>" + value);
        }
//        jCboCharsetEngFile.setSelectedItem(Charset.defaultCharset());
//        jCboCharsetVieFile.setSelectedItem(StandardCharsets.UTF_16);
    }

    private String translateLocal(String sequence) {
        String result = "";
        try {
            //1.
//            result = jafregle.translate(sequence);
            //2.
//            GoogleTranslator translator = new GoogleTranslator();
//            translator.setSrcLang(GoogleTranslator.LANGUAGE.ENGLISH);
//            translator.setDestLang(GoogleTranslator.LANGUAGE.VIETNAMESE);
            result = GoogleTranslator.sendGet(sequence);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return result;
        }
        return result;
    }
}
